{"version":3,"file":"static/js/159.bfb3b4a0.chunk.js","mappings":"oPA6CA,UApCqB,SAAHA,GAAsB,IAADC,EAAfC,EAAQF,EAARE,SACtBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAwCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC5BG,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,SAAqB,QAAdjB,EAAAc,EAASI,aAAK,IAAAlB,OAAA,EAAdA,EAAgBmB,OAAQ,oBAkB5C,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMV,EAAY,eAAAW,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEGC,EAAAA,EAAAA,IAAkBjB,EAAIX,GAAU,KAAD,EAA7CwB,EAAKC,EAAAI,KACXnB,EAAgBc,GAAOC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEvBM,QAAQC,MAAKP,EAAAK,IAAQ,QAIb,OAJaL,EAAAC,KAAA,GAErBO,YAAW,WACT3B,GAAa,EACf,GAAG,KAAKmB,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAEX,kBAXiB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAYlB5B,GACF,GAAG,CAACE,EAAIX,IAEDK,GACLiC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAEPD,EAAAA,EAAAA,KAACE,EAAAA,EAAO,CACNC,UAAWhC,EACXiC,KAAMjC,EACNM,KAAMA,EACNJ,GAAIA,EACJgC,YAAaC,GAGnB,C","sources":["pages/MovieDetails.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\n\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieDetails } from 'service/api';\n\nimport { Details } from 'components/Details/Details';\nimport availableMovies from 'data/movie/availableMovies.json';\n\nconst MovieDetails = ({ language }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [movieDetails, setMovieDetails] = useState([]);\n  const { id } = useParams();\n  const location = useLocation();\n  const back = useRef(location.state?.from || '/movies/trending');\n\n  useEffect(() => {\n    const movieDetails = async () => {\n      try {\n        const movie = await fetchMovieDetails(id, language);\n        setMovieDetails(movie);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setTimeout(() => {\n          setIsLoading(false);\n        }, 500);\n      }\n    };\n    movieDetails();\n  }, [id, language]);\n\n  return isLoading ? (\n    <Loader />\n  ) : (\n    <Details\n      movieData={movieDetails}\n      data={movieDetails}\n      back={back}\n      id={id}\n      availableId={availableMovies}\n    />\n  );\n};\n\nexport default MovieDetails;\n"],"names":["_ref","_location$state","language","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","movieDetails","setMovieDetails","id","useParams","location","useLocation","back","useRef","state","from","useEffect","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","movie","_context","prev","next","fetchMovieDetails","sent","t0","console","error","setTimeout","finish","stop","apply","arguments","_jsx","Loader","Details","movieData","data","availableId","availableMovies"],"sourceRoot":""}